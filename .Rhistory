setwd("H:/edu/semester_2/Study Project - Depth Imaging/statvis_final_18-2-18/statvis_reprise")
source('H:/edu/semester_2/Study Project - Depth Imaging/statvis_final_18-2-18/statvis_reprise/main.R', echo=TRUE)
track_details(2)
track_details(1)
track_details(3)
source("import.R")
#Analyzing
source("analyzetracks.R")
#Calculating statistics
source("analyzestats.R")
track_details(4)
?text
source('H:/edu/semester_2/Study Project - Depth Imaging/statvis_final_18-2-18/statvis_reprise/main.R', echo=TRUE)
track_details(4)
source('~/statvis_reprise-master/main.R', echo=TRUE)
source('~/statvis_reprise-master/main.R', echo=TRUE)
source('~/statvis_reprise-master/main.R', echo=TRUE)
source('~/statvis_reprise-master/loc2glob.R', echo=TRUE)
source('~/statvis_reprise-master/main.R', echo=TRUE)
globalized_json$c4[[1]]
plot(globalized_tracks[[17]])
plot(globalized_tracks[[16]])
plot(globalized_tracks[[15]])
plot(d_merged[[17]])
t1 = d_merged[[17]]
t1@data$misc.camera
source('~/statvis_reprise-master/main.R', echo=TRUE)
track_details(14)
source('~/statvis_reprise-master/main.R', echo=TRUE)
source('~/statvis_reprise-master/main.R', echo=TRUE)
source('~/statvis_reprise-master/main.R', echo=TRUE)
source('~/statvis_reprise-master/main.R', echo=TRUE)
# This file reads JSONs, extracts metadata and calls appropriate functions
# for cleaning the JSONs as required. Additionally, it implements the Coordinate Reference system
# and converts local camera coordinates to global coordinates by calling appropriate functions. It
# also calls functions to create objects of class Tracks by calling a function.
#Load required libraries
library('jsonlite')
# Inititalize list of lists for the cameras - can be made dynamic
# so that the number of elements (corresponding to each camera) in the outer list
# is generated based on the number of cameras present in the environment
json_data = list(c1 = list(), c2 = list(), c4 = list())
#Recursively read files with extension .json from the directory "Experiments"
files = list.files(path = "Experiments/", pattern = "*.json", recursive = TRUE, full.names = TRUE)
#Go through each files read
for(filename_w_path in files)
{
#import json values as text from json file
json_value = readLines(filename_w_path, n = -1, warn = FALSE)
#Read metadata of tracks from JSON char string with position numbers.
#read the camera number and store it in cid
cid = as.numeric(substr(json_value, 12, 13))
#Other values can also be read potentially
# height = as.numeric(substr(json_value, 104, 107))
# global_x = as.numeric(substr(json_value, 125, <end position here>)).
# global_y = as.numeric(substr(json_value, 147, <end position here>))
# global_z = as.numeric(substr(json_value, 169, <end position here>))
# tilt = as.numeric(substr(json_value, 185, <end position here>))
#Rectify JSON syntax
#remove the extra header in the data to make it compatible with the JSON format
#replace the 1st occurence of square brackets and anything inside the square brackets with an empty string ("") effectively deleting it
sample_json = sub("*\\[.*?\\] *", "", json_value)
#read the variable as a valid json
#Creates a data structure from the JSON text
sample_json = jsonlite::fromJSON(sample_json)
sample_json = sample_json$bodies_data
#Since there is no camera 3 in this case
#This is not needed if the camera numbers are sequential
if(cid == 4) cid = 3
#Goes through each data frame
for(i in 1:length(sample_json))
{
tailpos = length(json_data[[cid]]) + 1
json_data[[cid]][tailpos] = sample_json[i]
#converting "time" to POSIX time
# op <- options(digits.secs=6)
json_data[[cid]][[tailpos]]$time = strptime(json_data[[cid]][[tailpos]]$time, format = "%H:%M:%OS")#, format = "%H:%M:%OS")
#Write Camera ID as an attribute
json_data[[cid]][[tailpos]]$camera = cid
#Find starting & ending times
# print("Start time: ")
# start = head(json_data[[cid]][[tailpos]]$time, 1)
# print(start)
# print("End time: ")
# end = tail(json_data[[cid]][[tailpos]]$time, 1)
# print(end)
# #Find the duration
# print("Duration: ")
# print(end-start)
}
}
print("Finished reading and parsing JSONs!")
#Creates spatial reference system
#and converts local camera coordinates in visitors' trajectories
#to global coordinates
source("loc2glob.R")
globalized_json = loc2glob(json_data)
print("Finished converting local coordinates from cameras to global coordinates!")
library("sp")
library("spacetime")
library("trajectories")
i = 1
global_json = globalized_json
cam_trajs = list()
cam_trajs = list()
#For each camera in the list of data frames...
for(cams in global_json)
{
# print(i)
j = 1
#Initialize an empty list for tracks from a particular camera
each_cam = list()
#For each tracks in that particular camera...
for(tracks in cams)
{
#Create objecs of class Track
#Create a SpatialPointsDataFrame (from sp) object with coordinates (coords = )
#and data for each of these coordinates (data = ).
sp_obj = SpatialPointsDataFrame(coords = data.frame(tracks$x, tracks$y), data = subset(tracks, select = -c(1:2)))
#Create a stidf object with an explicit time attribute (time = ). The data (data = ) is retained
stidf_obj = STIDF(sp = sp_obj, time = sp_obj@data$time, data = subset(data.frame(misc = sp_obj@data), select = -c(2)))
#Finally create an object of class Track (from trajectories) from the STIDF object created above
track_obj = Track(stidf_obj)
#Append this Track object to the list for that particular camera (each_cam)
each_cam = c(each_cam, list(track_obj))
j = j+1
}
#Append the list for a camera (containing all the tracks observed by that camera)
#to the list cam_trajs which contains trajectories as list elements from all the cameras
cam_trajs = c(cam_trajs, each_cam)
i = i+1
cam_trajs = list()
#For each camera in the list of data frames...
for(cams in global_json)
{
# print(i)
j = 1
#Initialize an empty list for tracks from a particular camera
each_cam = list()
#For each tracks in that particular camera...
for(tracks in cams)
{
#Create objecs of class Track
#Create a SpatialPointsDataFrame (from sp) object with coordinates (coords = )
#and data for each of these coordinates (data = ).
sp_obj = SpatialPointsDataFrame(coords = data.frame(tracks$x, tracks$y), data = subset(tracks, select = -c(1:2)))
#Create a stidf object with an explicit time attribute (time = ). The data (data = ) is retained
stidf_obj = STIDF(sp = sp_obj, time = sp_obj@data$time, data = subset(data.frame(misc = sp_obj@data), select = -c(2)))
#Finally create an object of class Track (from trajectories) from the STIDF object created above
track_obj = Track(stidf_obj)
#Append this Track object to the list for that particular camera (each_cam)
each_cam = c(each_cam, list(track_obj))
j = j+1
}
#Append the list for a camera (containing all the tracks observed by that camera)
#to the list cam_trajs which contains trajectories as list elements from all the cameras
cam_trajs = c(cam_trajs, each_cam)
i = i+1
}
source('~/statvis_reprise-master/main.R', echo=TRUE)
source('~/statvis_reprise-master/main.R', echo=TRUE)
source('~/statvis_reprise-master/main.R', echo=TRUE)
setwd("H:/edu/semester_2/Study Project - Depth Imaging/statvis_final_18-2-18/statvis_reprise")
source('H:/edu/semester_2/Study Project - Depth Imaging/statvis_final_18-2-18/statvis_reprise/main.R', echo=TRUE)
source('H:/edu/semester_2/Study Project - Depth Imaging/statvis_final_18-2-18/statvis_reprise/main.R', echo=TRUE)
source('H:/edu/semester_2/Study Project - Depth Imaging/statvis_final_18-2-18/statvis_reprise/main.R', echo=TRUE)
source('H:/edu/semester_2/Study Project - Depth Imaging/statvis_final_18-2-18/statvis_reprise/main.R', echo=TRUE)
source('H:/edu/semester_2/Study Project - Depth Imaging/statvis_final_18-2-18/statvis_reprise/main.R', echo=TRUE)
source('H:/edu/semester_2/Study Project - Depth Imaging/statvis_final_18-2-18/statvis_reprise/main.R', echo=TRUE)
source('H:/edu/semester_2/Study Project - Depth Imaging/statvis_final_18-2-18/statvis_reprise/main.R', echo=TRUE)
